version: '3.9'

volumes:
  postgres_data:
  pgadmin:
  redis_data: 
  redis-insight-data: 
  postgres-data: 
  rabbitmq-data: 
  rabbitmq-log: 

#networks:
#  rabbitmq_go_net:
#    driver: bridge
#  postgresql_go_net:
#    driver: bridge
#  postgresql_admin_go_net:
#    driver: bridge
#  redis_insight_go_net:
#    driver: bridge
#  redis_go_net:
#    driver: bridge
#  registry_go_net:
#    driver: bridge

services:
  registry:
    container_name: registry
    restart: always
    image: registry
    ports:
      - 5000:5000
    volumes:
      #- ./config/config.yml:/etc/docker/registry/config.yml:ro
      - ./registry-data:/var/lib/registry:rw
    #networks:
    #  - registry_go_net
    #environment:
    #  - "STANDALONE=true"
    #  - "MIRROR_SOURCE=https://registry-1.docker.io"
    #  - "MIRROR_SOURCE_INDEX=https://index.docker.io"

  registry-ui:
    image: parabuzzle/craneoperator:latest
    ports:
    - 5050:80
    environment:
    - REGISTRY_HOST=${REGISTRY_HOST_UI}
    - REGISTRY_PORT=${REGISTRY_PORT}
    - REGISTRY_PROTOCOL=${REGISTRY_PROTOCOL}
    - SSL_VERIFY=${REGISTRY_SSL_VERIFY}
    - USERNAME=${REGISTRY_ADMIN}
    - PASSWORD=${REGISTRY_PASSWORD}
    restart: always
    depends_on:
    - registry


  postgres:
    container_name: pg_container
    image: postgres:latest
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRESQL_DATABASE_NAME}
      POSTGRES_USER: ${POSTGRESQL_DATABASE_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    #networks:
    #  - postgresql_go_net
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U user -d databaseName']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  adminer:
    image: adminer
    restart: always
    depends_on:
      - postgres
    ports:
      - 5051:8080
    #networks:
    #  - postgresql_admin_go_net

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - 5052:80
    environment:
       PGADMIN_DEFAULT_EMAIL: ${POSTGRESQL_ADMIN_EMAIL}
       PGADMIN_DEFAULT_PASSWORD: ${POSTGRESQL_ADMIN_PASSWORD}

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    volumes:
      - redis_data:/data
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    #networks:
    #  - redis_go_net

  redis_insight:
    image: redislabs/redisinsight:1.14.0
    container_name: redis_insight
    restart: always
    depends_on:
      - redis
    ports:
      - 5053:8001
    volumes:
      - redis-insight-data:/db
    #networks:
    #  - redis_insight_go_net


  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_COOKIE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    ports:
      - 5672:5672
      - 5054:15672
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/
      - rabbitmq-log:/var/log/rabbitmq
    #networks:
    #  - rabbitmq_go_net
    restart: unless-stopped